// This file is automatically @generated.
// It is not intended for manual editing.
use std::fmt::Debug;

#[cfg(target_os = "windows")]
use windows_sys::Win32::UI::Input::KeyboardAndMouse::*;
#[cfg(target_os = "windows")]
#[repr(C)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Key(pub u32);

#[cfg(target_os = "windows")]
impl Key {
    pub const KEY_TAB: Self = Self(VK_TAB as u32);
    pub const KEY_LEFTARROW: Self = Self(VK_LEFT as u32);
    pub const KEY_RIGHTARROW: Self = Self(VK_RIGHT as u32);
    pub const KEY_UPARROW: Self = Self(VK_UP as u32);
    pub const KEY_DOWNARROW: Self = Self(VK_DOWN as u32);
    pub const KEY_PAGEUP: Self = Self(VK_PRIOR as u32);
    pub const KEY_PAGEDOWN: Self = Self(VK_NEXT as u32);
    pub const KEY_HOME: Self = Self(VK_HOME as u32);
    pub const KEY_END: Self = Self(VK_END as u32);
    pub const KEY_INSERT: Self = Self(VK_INSERT as u32);
    pub const KEY_DELETE: Self = Self(VK_DELETE as u32);
    pub const KEY_BACKSPACE: Self = Self(VK_BACK as u32);
    pub const KEY_SPACE: Self = Self(VK_SPACE as u32);
    pub const KEY_ENTER: Self = Self(VK_RETURN as u32);
    pub const KEY_ESCAPE: Self = Self(VK_ESCAPE as u32);
    pub const KEY_APOSTROPHE: Self = Self(VK_OEM_7 as u32);
    pub const KEY_COMMA: Self = Self(VK_OEM_COMMA as u32);
    pub const KEY_MINUS: Self = Self(VK_OEM_MINUS as u32);
    pub const KEY_PERIOD: Self = Self(VK_OEM_PERIOD as u32);
    pub const KEY_SLASH: Self = Self(VK_OEM_2 as u32);
    pub const KEY_SEMICOLON: Self = Self(VK_OEM_1 as u32);
    pub const KEY_EQUAL: Self = Self(VK_OEM_PLUS as u32);
    pub const KEY_LEFTBRACKET: Self = Self(VK_OEM_4 as u32);
    pub const KEY_BACKSLASH: Self = Self(VK_OEM_5 as u32);
    pub const KEY_RIGHTBRACKET: Self = Self(VK_OEM_6 as u32);
    pub const KEY_GRAVEACCENT: Self = Self(VK_OEM_3 as u32);
    pub const KEY_CAPSLOCK: Self = Self(VK_CAPITAL as u32);
    pub const KEY_SCROLLLOCK: Self = Self(VK_SCROLL as u32);
    pub const KEY_NUMLOCK: Self = Self(VK_NUMLOCK as u32);
    pub const KEY_PRINTSCREEN: Self = Self(VK_SNAPSHOT as u32);
    pub const KEY_PAUSE: Self = Self(VK_PAUSE as u32);
    pub const KEY_KEYPAD0: Self = Self(VK_NUMPAD0 as u32);
    pub const KEY_KEYPAD1: Self = Self(VK_NUMPAD1 as u32);
    pub const KEY_KEYPAD2: Self = Self(VK_NUMPAD2 as u32);
    pub const KEY_KEYPAD3: Self = Self(VK_NUMPAD3 as u32);
    pub const KEY_KEYPAD4: Self = Self(VK_NUMPAD4 as u32);
    pub const KEY_KEYPAD5: Self = Self(VK_NUMPAD5 as u32);
    pub const KEY_KEYPAD6: Self = Self(VK_NUMPAD6 as u32);
    pub const KEY_KEYPAD7: Self = Self(VK_NUMPAD7 as u32);
    pub const KEY_KEYPAD8: Self = Self(VK_NUMPAD8 as u32);
    pub const KEY_KEYPAD9: Self = Self(VK_NUMPAD9 as u32);
    pub const KEY_KEYPADDECIMAL: Self = Self(VK_DECIMAL as u32);
    pub const KEY_KEYPADDIVIDE: Self = Self(VK_DIVIDE as u32);
    pub const KEY_KEYPADMULTIPLY: Self = Self(VK_MULTIPLY as u32);
    pub const KEY_KEYPADSUBTRACT: Self = Self(VK_SUBTRACT as u32);
    pub const KEY_KEYPADADD: Self = Self(VK_ADD as u32);
    pub const KEY_KEYPADENTER: Self = Self(VK_RETURN as u32);
    pub const KEY_LEFTSHIFT: Self = Self(VK_LSHIFT as u32);
    pub const KEY_LEFTCTRL: Self = Self(VK_LCONTROL as u32);
    pub const KEY_LEFTALT: Self = Self(VK_LMENU as u32);
    pub const KEY_LEFTSUPER: Self = Self(VK_LWIN as u32);
    pub const KEY_RIGHTSHIFT: Self = Self(VK_RSHIFT as u32);
    pub const KEY_RIGHTCTRL: Self = Self(VK_RCONTROL as u32);
    pub const KEY_RIGHTALT: Self = Self(VK_RMENU as u32);
    pub const KEY_RIGHTSUPER: Self = Self(VK_RWIN as u32);
    pub const KEY_MENU: Self = Self(VK_APPS as u32);
    pub const KEY_0: Self = Self(VK_0  as u32);
    pub const KEY_1: Self = Self(VK_1  as u32);
    pub const KEY_2: Self = Self(VK_2  as u32);
    pub const KEY_3: Self = Self(VK_3  as u32);
    pub const KEY_4: Self = Self(VK_4  as u32);
    pub const KEY_5: Self = Self(VK_5  as u32);
    pub const KEY_6: Self = Self(VK_6  as u32);
    pub const KEY_7: Self = Self(VK_7  as u32);
    pub const KEY_8: Self = Self(VK_8  as u32);
    pub const KEY_9: Self = Self(VK_9  as u32);
    pub const KEY_A: Self = Self(VK_A  as u32);
    pub const KEY_B: Self = Self(VK_B  as u32);
    pub const KEY_C: Self = Self(VK_C  as u32);
    pub const KEY_D: Self = Self(VK_D  as u32);
    pub const KEY_E: Self = Self(VK_E  as u32);
    pub const KEY_F: Self = Self(VK_F  as u32);
    pub const KEY_G: Self = Self(VK_G  as u32);
    pub const KEY_H: Self = Self(VK_H  as u32);
    pub const KEY_I: Self = Self(VK_I  as u32);
    pub const KEY_J: Self = Self(VK_J  as u32);
    pub const KEY_K: Self = Self(VK_K  as u32);
    pub const KEY_L: Self = Self(VK_L  as u32);
    pub const KEY_M: Self = Self(VK_M  as u32);
    pub const KEY_N: Self = Self(VK_N  as u32);
    pub const KEY_O: Self = Self(VK_O  as u32);
    pub const KEY_P: Self = Self(VK_P  as u32);
    pub const KEY_Q: Self = Self(VK_Q  as u32);
    pub const KEY_R: Self = Self(VK_R  as u32);
    pub const KEY_S: Self = Self(VK_S  as u32);
    pub const KEY_T: Self = Self(VK_T  as u32);
    pub const KEY_U: Self = Self(VK_U  as u32);
    pub const KEY_V: Self = Self(VK_V  as u32);
    pub const KEY_W: Self = Self(VK_W  as u32);
    pub const KEY_X: Self = Self(VK_X  as u32);
    pub const KEY_Y: Self = Self(VK_Y  as u32);
    pub const KEY_Z: Self = Self(VK_Z  as u32);
    pub const KEY_F1: Self = Self(VK_F1 as u32);
    pub const KEY_F2: Self = Self(VK_F2 as u32);
    pub const KEY_F3: Self = Self(VK_F3 as u32);
    pub const KEY_F4: Self = Self(VK_F4 as u32);
    pub const KEY_F5: Self = Self(VK_F5 as u32);
    pub const KEY_F6: Self = Self(VK_F6 as u32);
    pub const KEY_F7: Self = Self(VK_F7 as u32);
    pub const KEY_F8: Self = Self(VK_F8 as u32);
    pub const KEY_F9: Self = Self(VK_F9 as u32);
    pub const KEY_F10: Self = Self(VK_F10 as u32);
    pub const KEY_F11: Self = Self(VK_F11 as u32);
    pub const KEY_F12: Self = Self(VK_F12 as u32);
}

#[cfg(target_os = "linux")]
use x11::keysym::*;
#[cfg(target_os = "linux")]
#[repr(C)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Key(pub u32);

#[cfg(target_os = "linux")]
impl Key {
    pub const KEY_TAB: Self = Self(XK_Tab as u32);
    pub const KEY_LEFTARROW: Self = Self(XK_Left as u32);
    pub const KEY_RIGHTARROW: Self = Self(XK_Right as u32);
    pub const KEY_UPARROW: Self = Self(XK_Up as u32);
    pub const KEY_DOWNARROW: Self = Self(XK_Down as u32);
    pub const KEY_PAGEUP: Self = Self(XK_Page_Up as u32);
    pub const KEY_PAGEDOWN: Self = Self(XK_Page_Down as u32);
    pub const KEY_HOME: Self = Self(XK_Home as u32);
    pub const KEY_END: Self = Self(XK_End as u32);
    pub const KEY_INSERT: Self = Self(XK_Insert as u32);
    pub const KEY_DELETE: Self = Self(XK_Delete as u32);
    pub const KEY_BACKSPACE: Self = Self(XK_BackSpace as u32);
    pub const KEY_SPACE: Self = Self(XK_space as u32);
    pub const KEY_ENTER: Self = Self(XK_Return as u32);
    pub const KEY_ESCAPE: Self = Self(XK_Escape as u32);
    pub const KEY_APOSTROPHE: Self = Self(XK_apostrophe as u32);
    pub const KEY_COMMA: Self = Self(XK_comma as u32);
    pub const KEY_MINUS: Self = Self(XK_minus as u32);
    pub const KEY_PERIOD: Self = Self(XK_period as u32);
    pub const KEY_SLASH: Self = Self(XK_slash as u32);
    pub const KEY_SEMICOLON: Self = Self(XK_semicolon as u32);
    pub const KEY_EQUAL: Self = Self(XK_equal as u32);
    pub const KEY_LEFTBRACKET: Self = Self(XK_bracketleft as u32);
    pub const KEY_BACKSLASH: Self = Self(XK_backslash as u32);
    pub const KEY_RIGHTBRACKET: Self = Self(XK_bracketright as u32);
    pub const KEY_GRAVEACCENT: Self = Self(XK_grave as u32);
    pub const KEY_CAPSLOCK: Self = Self(XK_Caps_Lock as u32);
    pub const KEY_SCROLLLOCK: Self = Self(XK_Scroll_Lock as u32);
    pub const KEY_NUMLOCK: Self = Self(XK_Num_Lock as u32);
    pub const KEY_PRINTSCREEN: Self = Self(XK_Print as u32);
    pub const KEY_PAUSE: Self = Self(XK_Pause as u32);
    pub const KEY_KEYPAD0: Self = Self(XK_KP_0 as u32);
    pub const KEY_KEYPAD1: Self = Self(XK_KP_1 as u32);
    pub const KEY_KEYPAD2: Self = Self(XK_KP_2 as u32);
    pub const KEY_KEYPAD3: Self = Self(XK_KP_3 as u32);
    pub const KEY_KEYPAD4: Self = Self(XK_KP_4 as u32);
    pub const KEY_KEYPAD5: Self = Self(XK_KP_5 as u32);
    pub const KEY_KEYPAD6: Self = Self(XK_KP_6 as u32);
    pub const KEY_KEYPAD7: Self = Self(XK_KP_7 as u32);
    pub const KEY_KEYPAD8: Self = Self(XK_KP_8 as u32);
    pub const KEY_KEYPAD9: Self = Self(XK_KP_9 as u32);
    pub const KEY_KEYPADDECIMAL: Self = Self(XK_KP_Decimal as u32);
    pub const KEY_KEYPADDIVIDE: Self = Self(XK_KP_Divide as u32);
    pub const KEY_KEYPADMULTIPLY: Self = Self(XK_KP_Multiply as u32);
    pub const KEY_KEYPADSUBTRACT: Self = Self(XK_KP_Subtract as u32);
    pub const KEY_KEYPADADD: Self = Self(XK_KP_Add as u32);
    pub const KEY_KEYPADENTER: Self = Self(XK_KP_Enter as u32);
    pub const KEY_LEFTSHIFT: Self = Self(XK_Shift_L as u32);
    pub const KEY_LEFTCTRL: Self = Self(XK_Control_L as u32);
    pub const KEY_LEFTALT: Self = Self(XK_Alt_L as u32);
    pub const KEY_LEFTSUPER: Self = Self(XK_Super_L as u32);
    pub const KEY_RIGHTSHIFT: Self = Self(XK_Shift_R as u32);
    pub const KEY_RIGHTCTRL: Self = Self(XK_Control_R as u32);
    pub const KEY_RIGHTALT: Self = Self(XK_Alt_R as u32);
    pub const KEY_RIGHTSUPER: Self = Self(XK_Super_R as u32);
    pub const KEY_MENU: Self = Self(XK_Menu as u32);
    pub const KEY_0: Self = Self(XK_0 as u32);
    pub const KEY_1: Self = Self(XK_1 as u32);
    pub const KEY_2: Self = Self(XK_2 as u32);
    pub const KEY_3: Self = Self(XK_3 as u32);
    pub const KEY_4: Self = Self(XK_4 as u32);
    pub const KEY_5: Self = Self(XK_5 as u32);
    pub const KEY_6: Self = Self(XK_6 as u32);
    pub const KEY_7: Self = Self(XK_7 as u32);
    pub const KEY_8: Self = Self(XK_8 as u32);
    pub const KEY_9: Self = Self(XK_9 as u32);
    pub const KEY_A: Self = Self(XK_a as u32);
    pub const KEY_B: Self = Self(XK_b as u32);
    pub const KEY_C: Self = Self(XK_c as u32);
    pub const KEY_D: Self = Self(XK_d as u32);
    pub const KEY_E: Self = Self(XK_e as u32);
    pub const KEY_F: Self = Self(XK_f as u32);
    pub const KEY_G: Self = Self(XK_g as u32);
    pub const KEY_H: Self = Self(XK_h as u32);
    pub const KEY_I: Self = Self(XK_i as u32);
    pub const KEY_J: Self = Self(XK_j as u32);
    pub const KEY_K: Self = Self(XK_k as u32);
    pub const KEY_L: Self = Self(XK_l as u32);
    pub const KEY_M: Self = Self(XK_m as u32);
    pub const KEY_N: Self = Self(XK_n as u32);
    pub const KEY_O: Self = Self(XK_o as u32);
    pub const KEY_P: Self = Self(XK_p as u32);
    pub const KEY_Q: Self = Self(XK_q as u32);
    pub const KEY_R: Self = Self(XK_r as u32);
    pub const KEY_S: Self = Self(XK_s as u32);
    pub const KEY_T: Self = Self(XK_t as u32);
    pub const KEY_U: Self = Self(XK_u as u32);
    pub const KEY_V: Self = Self(XK_v as u32);
    pub const KEY_W: Self = Self(XK_w as u32);
    pub const KEY_X: Self = Self(XK_x as u32);
    pub const KEY_Y: Self = Self(XK_y as u32);
    pub const KEY_Z: Self = Self(XK_z as u32);
    pub const KEY_F1: Self = Self(XK_F1 as u32);
    pub const KEY_F2: Self = Self(XK_F2 as u32);
    pub const KEY_F3: Self = Self(XK_F3 as u32);
    pub const KEY_F4: Self = Self(XK_F4 as u32);
    pub const KEY_F5: Self = Self(XK_F5 as u32);
    pub const KEY_F6: Self = Self(XK_F6 as u32);
    pub const KEY_F7: Self = Self(XK_F7 as u32);
    pub const KEY_F8: Self = Self(XK_F8 as u32);
    pub const KEY_F9: Self = Self(XK_F9 as u32);
    pub const KEY_F10: Self = Self(XK_F10 as u32);
    pub const KEY_F11: Self = Self(XK_F11 as u32);
    pub const KEY_F12: Self = Self(XK_F12 as u32);
}

#[cfg(target_os = "android")]
use ndk_sys::*;
#[cfg(target_os = "android")]
#[repr(C)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Key(pub u32);

#[cfg(target_os = "android")]
impl Key {
    pub const KEY_TAB: Self = Self(AKEYCODE_TAB as u32);
    pub const KEY_LEFTARROW: Self = Self(AKEYCODE_DPAD_LEFT as u32);
    pub const KEY_RIGHTARROW: Self = Self(AKEYCODE_DPAD_RIGHT as u32);
    pub const KEY_UPARROW: Self = Self(AKEYCODE_DPAD_UP as u32);
    pub const KEY_DOWNARROW: Self = Self(AKEYCODE_DPAD_DOWN as u32);
    pub const KEY_PAGEUP: Self = Self(AKEYCODE_PAGE_UP as u32);
    pub const KEY_PAGEDOWN: Self = Self(AKEYCODE_PAGE_DOWN as u32);
    pub const KEY_HOME: Self = Self(AKEYCODE_HOME as u32);
    pub const KEY_END: Self = Self(AKEYCODE_MOVE_END as u32);
    pub const KEY_INSERT: Self = Self(AKEYCODE_INSERT as u32);
    pub const KEY_DELETE: Self = Self(AKEYCODE_DEL as u32);
    pub const KEY_BACKSPACE: Self = Self(AKEYCODE_DEL as u32);
    pub const KEY_SPACE: Self = Self(AKEYCODE_SPACE as u32);
    pub const KEY_ENTER: Self = Self(AKEYCODE_ENTER as u32);
    pub const KEY_ESCAPE: Self = Self(AKEYCODE_ESCAPE as u32);
    pub const KEY_APOSTROPHE: Self = Self(AKEYCODE_APOSTROPHE as u32);
    pub const KEY_COMMA: Self = Self(AKEYCODE_COMMA as u32);
    pub const KEY_MINUS: Self = Self(AKEYCODE_MINUS as u32);
    pub const KEY_PERIOD: Self = Self(AKEYCODE_PERIOD as u32);
    pub const KEY_SLASH: Self = Self(AKEYCODE_SLASH as u32);
    pub const KEY_SEMICOLON: Self = Self(AKEYCODE_SEMICOLON as u32);
    pub const KEY_EQUAL: Self = Self(AKEYCODE_EQUALS as u32);
    pub const KEY_LEFTBRACKET: Self = Self(AKEYCODE_LEFT_BRACKET as u32);
    pub const KEY_BACKSLASH: Self = Self(AKEYCODE_BACKSLASH as u32);
    pub const KEY_RIGHTBRACKET: Self = Self(AKEYCODE_RIGHT_BRACKET as u32);
    pub const KEY_GRAVEACCENT: Self = Self(AKEYCODE_GRAVE as u32);
    pub const KEY_CAPSLOCK: Self = Self(AKEYCODE_CAPS_LOCK as u32);
    pub const KEY_SCROLLLOCK: Self = Self(AKEYCODE_SCROLL_LOCK as u32);
    pub const KEY_NUMLOCK: Self = Self(AKEYCODE_NUM_LOCK as u32);
    pub const KEY_PRINTSCREEN: Self = Self(AKEYCODE_SYSRQ as u32);
    pub const KEY_PAUSE: Self = Self(AKEYCODE_MEDIA_PLAY_PAUSE as u32);
    pub const KEY_KEYPAD0: Self = Self(AKEYCODE_NUMPAD_0 as u32);
    pub const KEY_KEYPAD1: Self = Self(AKEYCODE_NUMPAD_1 as u32);
    pub const KEY_KEYPAD2: Self = Self(AKEYCODE_NUMPAD_2 as u32);
    pub const KEY_KEYPAD3: Self = Self(AKEYCODE_NUMPAD_3 as u32);
    pub const KEY_KEYPAD4: Self = Self(AKEYCODE_NUMPAD_4 as u32);
    pub const KEY_KEYPAD5: Self = Self(AKEYCODE_NUMPAD_5 as u32);
    pub const KEY_KEYPAD6: Self = Self(AKEYCODE_NUMPAD_6 as u32);
    pub const KEY_KEYPAD7: Self = Self(AKEYCODE_NUMPAD_7 as u32);
    pub const KEY_KEYPAD8: Self = Self(AKEYCODE_NUMPAD_8 as u32);
    pub const KEY_KEYPAD9: Self = Self(AKEYCODE_NUMPAD_9 as u32);
    pub const KEY_KEYPADDECIMAL: Self = Self(AKEYCODE_NUMPAD_COMMA as u32);
    pub const KEY_KEYPADDIVIDE: Self = Self(AKEYCODE_NUMPAD_DIVIDE as u32);
    pub const KEY_KEYPADMULTIPLY: Self = Self(AKEYCODE_NUMPAD_MULTIPLY as u32);
    pub const KEY_KEYPADSUBTRACT: Self = Self(AKEYCODE_NUMPAD_SUBTRACT as u32);
    pub const KEY_KEYPADADD: Self = Self(AKEYCODE_NUMPAD_ADD as u32);
    pub const KEY_KEYPADENTER: Self = Self(AKEYCODE_ENTER as u32);
    pub const KEY_LEFTSHIFT: Self = Self(AKEYCODE_SHIFT_LEFT as u32);
    pub const KEY_LEFTCTRL: Self = Self(AKEYCODE_CTRL_LEFT as u32);
    pub const KEY_LEFTALT: Self = Self(AKEYCODE_ALT_LEFT as u32);
    pub const KEY_LEFTSUPER: Self = Self(AKEYCODE_META_LEFT as u32);
    pub const KEY_RIGHTSHIFT: Self = Self(AKEYCODE_SHIFT_RIGHT as u32);
    pub const KEY_RIGHTCTRL: Self = Self(AKEYCODE_CTRL_RIGHT as u32);
    pub const KEY_RIGHTALT: Self = Self(AKEYCODE_ALT_RIGHT as u32);
    pub const KEY_RIGHTSUPER: Self = Self(AKEYCODE_META_RIGHT as u32);
    pub const KEY_MENU: Self = Self(AKEYCODE_MENU as u32);
    pub const KEY_0: Self = Self(AKEYCODE_0 as u32);
    pub const KEY_1: Self = Self(AKEYCODE_1 as u32);
    pub const KEY_2: Self = Self(AKEYCODE_2 as u32);
    pub const KEY_3: Self = Self(AKEYCODE_3 as u32);
    pub const KEY_4: Self = Self(AKEYCODE_4 as u32);
    pub const KEY_5: Self = Self(AKEYCODE_5 as u32);
    pub const KEY_6: Self = Self(AKEYCODE_6 as u32);
    pub const KEY_7: Self = Self(AKEYCODE_7 as u32);
    pub const KEY_8: Self = Self(AKEYCODE_8 as u32);
    pub const KEY_9: Self = Self(AKEYCODE_9 as u32);
    pub const KEY_A: Self = Self(AKEYCODE_A as u32);
    pub const KEY_B: Self = Self(AKEYCODE_B as u32);
    pub const KEY_C: Self = Self(AKEYCODE_C as u32);
    pub const KEY_D: Self = Self(AKEYCODE_D as u32);
    pub const KEY_E: Self = Self(AKEYCODE_E as u32);
    pub const KEY_F: Self = Self(AKEYCODE_F as u32);
    pub const KEY_G: Self = Self(AKEYCODE_G as u32);
    pub const KEY_H: Self = Self(AKEYCODE_H as u32);
    pub const KEY_I: Self = Self(AKEYCODE_I as u32);
    pub const KEY_J: Self = Self(AKEYCODE_J as u32);
    pub const KEY_K: Self = Self(AKEYCODE_K as u32);
    pub const KEY_L: Self = Self(AKEYCODE_L as u32);
    pub const KEY_M: Self = Self(AKEYCODE_M as u32);
    pub const KEY_N: Self = Self(AKEYCODE_N as u32);
    pub const KEY_O: Self = Self(AKEYCODE_O as u32);
    pub const KEY_P: Self = Self(AKEYCODE_P as u32);
    pub const KEY_Q: Self = Self(AKEYCODE_Q as u32);
    pub const KEY_R: Self = Self(AKEYCODE_R as u32);
    pub const KEY_S: Self = Self(AKEYCODE_S as u32);
    pub const KEY_T: Self = Self(AKEYCODE_T as u32);
    pub const KEY_U: Self = Self(AKEYCODE_U as u32);
    pub const KEY_V: Self = Self(AKEYCODE_V as u32);
    pub const KEY_W: Self = Self(AKEYCODE_W as u32);
    pub const KEY_X: Self = Self(AKEYCODE_X as u32);
    pub const KEY_Y: Self = Self(AKEYCODE_Y as u32);
    pub const KEY_Z: Self = Self(AKEYCODE_Z as u32);
    pub const KEY_F1: Self = Self(AKEYCODE_F1 as u32);
    pub const KEY_F2: Self = Self(AKEYCODE_F2 as u32);
    pub const KEY_F3: Self = Self(AKEYCODE_F3 as u32);
    pub const KEY_F4: Self = Self(AKEYCODE_F4 as u32);
    pub const KEY_F5: Self = Self(AKEYCODE_F5 as u32);
    pub const KEY_F6: Self = Self(AKEYCODE_F6 as u32);
    pub const KEY_F7: Self = Self(AKEYCODE_F7 as u32);
    pub const KEY_F8: Self = Self(AKEYCODE_F8 as u32);
    pub const KEY_F9: Self = Self(AKEYCODE_F9 as u32);
    pub const KEY_F10: Self = Self(AKEYCODE_F10 as u32);
    pub const KEY_F11: Self = Self(AKEYCODE_F11 as u32);
    pub const KEY_F12: Self = Self(AKEYCODE_F12 as u32);
}

impl Debug for Key {
    #[allow(unreachable_patterns)]
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match *self {
            Key::KEY_TAB => f.write_str("Key::KEY_TAB"),
            Key::KEY_LEFTARROW => f.write_str("Key::KEY_LEFTARROW"),
            Key::KEY_RIGHTARROW => f.write_str("Key::KEY_RIGHTARROW"),
            Key::KEY_UPARROW => f.write_str("Key::KEY_UPARROW"),
            Key::KEY_DOWNARROW => f.write_str("Key::KEY_DOWNARROW"),
            Key::KEY_PAGEUP => f.write_str("Key::KEY_PAGEUP"),
            Key::KEY_PAGEDOWN => f.write_str("Key::KEY_PAGEDOWN"),
            Key::KEY_HOME => f.write_str("Key::KEY_HOME"),
            Key::KEY_END => f.write_str("Key::KEY_END"),
            Key::KEY_INSERT => f.write_str("Key::KEY_INSERT"),
            Key::KEY_DELETE => f.write_str("Key::KEY_DELETE"),
            Key::KEY_BACKSPACE => f.write_str("Key::KEY_BACKSPACE"),
            Key::KEY_SPACE => f.write_str("Key::KEY_SPACE"),
            Key::KEY_ENTER => f.write_str("Key::KEY_ENTER"),
            Key::KEY_ESCAPE => f.write_str("Key::KEY_ESCAPE"),
            Key::KEY_APOSTROPHE => f.write_str("Key::KEY_APOSTROPHE"),
            Key::KEY_COMMA => f.write_str("Key::KEY_COMMA"),
            Key::KEY_MINUS => f.write_str("Key::KEY_MINUS"),
            Key::KEY_PERIOD => f.write_str("Key::KEY_PERIOD"),
            Key::KEY_SLASH => f.write_str("Key::KEY_SLASH"),
            Key::KEY_SEMICOLON => f.write_str("Key::KEY_SEMICOLON"),
            Key::KEY_EQUAL => f.write_str("Key::KEY_EQUAL"),
            Key::KEY_LEFTBRACKET => f.write_str("Key::KEY_LEFTBRACKET"),
            Key::KEY_BACKSLASH => f.write_str("Key::KEY_BACKSLASH"),
            Key::KEY_RIGHTBRACKET => f.write_str("Key::KEY_RIGHTBRACKET"),
            Key::KEY_GRAVEACCENT => f.write_str("Key::KEY_GRAVEACCENT"),
            Key::KEY_CAPSLOCK => f.write_str("Key::KEY_CAPSLOCK"),
            Key::KEY_SCROLLLOCK => f.write_str("Key::KEY_SCROLLLOCK"),
            Key::KEY_NUMLOCK => f.write_str("Key::KEY_NUMLOCK"),
            Key::KEY_PRINTSCREEN => f.write_str("Key::KEY_PRINTSCREEN"),
            Key::KEY_PAUSE => f.write_str("Key::KEY_PAUSE"),
            Key::KEY_KEYPAD0 => f.write_str("Key::KEY_KEYPAD0"),
            Key::KEY_KEYPAD1 => f.write_str("Key::KEY_KEYPAD1"),
            Key::KEY_KEYPAD2 => f.write_str("Key::KEY_KEYPAD2"),
            Key::KEY_KEYPAD3 => f.write_str("Key::KEY_KEYPAD3"),
            Key::KEY_KEYPAD4 => f.write_str("Key::KEY_KEYPAD4"),
            Key::KEY_KEYPAD5 => f.write_str("Key::KEY_KEYPAD5"),
            Key::KEY_KEYPAD6 => f.write_str("Key::KEY_KEYPAD6"),
            Key::KEY_KEYPAD7 => f.write_str("Key::KEY_KEYPAD7"),
            Key::KEY_KEYPAD8 => f.write_str("Key::KEY_KEYPAD8"),
            Key::KEY_KEYPAD9 => f.write_str("Key::KEY_KEYPAD9"),
            Key::KEY_KEYPADDECIMAL => f.write_str("Key::KEY_KEYPADDECIMAL"),
            Key::KEY_KEYPADDIVIDE => f.write_str("Key::KEY_KEYPADDIVIDE"),
            Key::KEY_KEYPADMULTIPLY => f.write_str("Key::KEY_KEYPADMULTIPLY"),
            Key::KEY_KEYPADSUBTRACT => f.write_str("Key::KEY_KEYPADSUBTRACT"),
            Key::KEY_KEYPADADD => f.write_str("Key::KEY_KEYPADADD"),
            Key::KEY_KEYPADENTER => f.write_str("Key::KEY_KEYPADENTER"),
            Key::KEY_LEFTSHIFT => f.write_str("Key::KEY_LEFTSHIFT"),
            Key::KEY_LEFTCTRL => f.write_str("Key::KEY_LEFTCTRL"),
            Key::KEY_LEFTALT => f.write_str("Key::KEY_LEFTALT"),
            Key::KEY_LEFTSUPER => f.write_str("Key::KEY_LEFTSUPER"),
            Key::KEY_RIGHTSHIFT => f.write_str("Key::KEY_RIGHTSHIFT"),
            Key::KEY_RIGHTCTRL => f.write_str("Key::KEY_RIGHTCTRL"),
            Key::KEY_RIGHTALT => f.write_str("Key::KEY_RIGHTALT"),
            Key::KEY_RIGHTSUPER => f.write_str("Key::KEY_RIGHTSUPER"),
            Key::KEY_MENU => f.write_str("Key::KEY_MENU"),
            Key::KEY_0 => f.write_str("Key::KEY_0"),
            Key::KEY_1 => f.write_str("Key::KEY_1"),
            Key::KEY_2 => f.write_str("Key::KEY_2"),
            Key::KEY_3 => f.write_str("Key::KEY_3"),
            Key::KEY_4 => f.write_str("Key::KEY_4"),
            Key::KEY_5 => f.write_str("Key::KEY_5"),
            Key::KEY_6 => f.write_str("Key::KEY_6"),
            Key::KEY_7 => f.write_str("Key::KEY_7"),
            Key::KEY_8 => f.write_str("Key::KEY_8"),
            Key::KEY_9 => f.write_str("Key::KEY_9"),
            Key::KEY_A => f.write_str("Key::KEY_A"),
            Key::KEY_B => f.write_str("Key::KEY_B"),
            Key::KEY_C => f.write_str("Key::KEY_C"),
            Key::KEY_D => f.write_str("Key::KEY_D"),
            Key::KEY_E => f.write_str("Key::KEY_E"),
            Key::KEY_F => f.write_str("Key::KEY_F"),
            Key::KEY_G => f.write_str("Key::KEY_G"),
            Key::KEY_H => f.write_str("Key::KEY_H"),
            Key::KEY_I => f.write_str("Key::KEY_I"),
            Key::KEY_J => f.write_str("Key::KEY_J"),
            Key::KEY_K => f.write_str("Key::KEY_K"),
            Key::KEY_L => f.write_str("Key::KEY_L"),
            Key::KEY_M => f.write_str("Key::KEY_M"),
            Key::KEY_N => f.write_str("Key::KEY_N"),
            Key::KEY_O => f.write_str("Key::KEY_O"),
            Key::KEY_P => f.write_str("Key::KEY_P"),
            Key::KEY_Q => f.write_str("Key::KEY_Q"),
            Key::KEY_R => f.write_str("Key::KEY_R"),
            Key::KEY_S => f.write_str("Key::KEY_S"),
            Key::KEY_T => f.write_str("Key::KEY_T"),
            Key::KEY_U => f.write_str("Key::KEY_U"),
            Key::KEY_V => f.write_str("Key::KEY_V"),
            Key::KEY_W => f.write_str("Key::KEY_W"),
            Key::KEY_X => f.write_str("Key::KEY_X"),
            Key::KEY_Y => f.write_str("Key::KEY_Y"),
            Key::KEY_Z => f.write_str("Key::KEY_Z"),
            Key::KEY_F1 => f.write_str("Key::KEY_F1"),
            Key::KEY_F2 => f.write_str("Key::KEY_F2"),
            Key::KEY_F3 => f.write_str("Key::KEY_F3"),
            Key::KEY_F4 => f.write_str("Key::KEY_F4"),
            Key::KEY_F5 => f.write_str("Key::KEY_F5"),
            Key::KEY_F6 => f.write_str("Key::KEY_F6"),
            Key::KEY_F7 => f.write_str("Key::KEY_F7"),
            Key::KEY_F8 => f.write_str("Key::KEY_F8"),
            Key::KEY_F9 => f.write_str("Key::KEY_F9"),
            Key::KEY_F10 => f.write_str("Key::KEY_F10"),
            Key::KEY_F11 => f.write_str("Key::KEY_F11"),
            Key::KEY_F12 => f.write_str("Key::KEY_F12"),
            any => write!(f, "Key({})", any.0),
        }
    }
}
